#version 430

layout( local_size_x = 1024, local_size_y = 1, local_size_z = 1 ) in;

// Input buffer: original vertex positions
layout( std430, binding = 0 ) buffer OriginalInputBuffer {
    vec3 originalPositions[];
};

// Output buffer 1: positively perturbed positions
layout( std430, binding = 1 ) buffer PerturbedOutputBuffer {
    vec3 perturbedPositions[];
};

// Output buffer 2: negatively perturbed positions
layout( std430, binding = 2 ) buffer PerturbedOppositeOutputBuffer {
    vec3 perturbedOppositePositions[];
};

// Psuedo-random generator courtesy of https://stackoverflow.com/a/17479300
// A single iteration of Bob Jenkins' One-At-A-Time hashing algorithm.
uint hash( uint x ) {
    x += ( x << 10u );
    x ^= ( x >>  6u );
    x += ( x <<  3u );
    x ^= ( x >> 11u );
    x += ( x << 15u );
    return x;
}

// Construct a float with half-open range [0:1] using low 23 bits.
// All zeroes yields 0.0, all ones yields the next smallest representable value below 1.0.
float floatConstruct( uint m ) {
    const uint ieeeMantissa = 0x007FFFFFu; // binary32 mantissa bitmask
    const uint ieeeOne      = 0x3F800000u; // 1.0 in IEEE binary32

    m &= ieeeMantissa;                     // Keep only mantissa bits (fractional part)
    m |= ieeeOne;                          // Add fractional part to 1.0

    float  f = uintBitsToFloat( m );       // Range [1:2]
    return f - 1.5;                        // Range [-0.5:0.5]
}

// Pseudo-random value in half-open range [-0.5:0.5].
float random( float x ) { return floatConstruct(hash(floatBitsToUint(x))); }

uniform float currentTime;
uniform float perturbMag = 0.01;

void main() {
    uint gid = gl_GlobalInvocationID.x;
    if (gid >= originalPositions.length()) return;

    // Get the original position for this vertex
    vec3 originalPos = originalPositions[gid];

    float randomX = random(random(currentTime + gid));
    float randomY = random(random(currentTime + gid) + 1);
    float randomZ = random(random(currentTime + gid) + 2);

    vec3 randomDir = vec3(randomX, randomY, randomZ);

    // Perturb for the first output (positively perturbed)
    perturbedPositions[gid] = originalPos + randomDir * perturbMag;
    //perturbedPositions[gid] = originalPos + vec3(1.0);

    // Perturb for the second output (negatively perturbed)
    perturbedOppositePositions[gid] = originalPos - randomDir * perturbMag;
}